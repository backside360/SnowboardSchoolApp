{"version":3,"sources":["components/Layouts/Main.tsx","components/Molecules/MainMenu/index.tsx","entities/menu/index.ts","containers/MenuContainer.tsx","entities/training/index.tsx","components/Molecules/Training/index.tsx","pages/Booking.tsx","pages/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MainLayout","Header","header","Body","body","Footer","footer","className","Content","MainMenu","items","onSelect","selectedKey","handleClick","React","useCallback","e","key","Object","keys","length","mode","onClick","selectedKeys","Item","main","menuId","disabled","title","novosti","addMenuItem","item","changeMenuItem","observable","observer","MenuComponent","component","history","useHistory","match","useRouteMatch","useEffect","Menu","role","routerId","push","selectedMenuId","values","find","params","type","places","Option","Select","Training","props","times","onFinish","speciality","a","message","success","info","justify","sm","layout","name","label","rules","required","style","width","map","place","value","locale","time","i","htmlType","goBack","active","BookingInfo","useState","setSpeciality","setPlaces","location","pathname","split","pop","toJS","TrainingStore","trainings","elem","Card","MenuContainer","School","lazy","About","Main","Suspense","fallback","Routes","basename","process","exact","path","Booking","to","App","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.1e8f933a.chunk.js","sourcesContent":["import React from 'react';\nimport { Layout } from 'antd';\n\nimport './styles.css';\n\ninterface IProps {\n  header?: React.ElementType;\n  body?: React.ElementType;\n  footer?: React.ElementType;\n}\n\nexport const MainLayout: React.FC<IProps> = ({\n  header: Header,\n  body: Body,\n  footer: Footer,\n}) => (\n  <div className=\"main\">\n    {Header && <Header />}\n    <Layout>\n      <Layout.Content className=\"content\">{Body && <Body />}</Layout.Content>\n    </Layout>\n    {Footer && <Footer />}\n  </div>\n);\n","import React from 'react';\nimport { Menu } from 'antd';\nimport { IMenu } from '../../../entities/menu/types';\n\ninterface IProps {\n  items: IMenu;\n  onSelect: (menuId: string) => void;\n  selectedKey: string;\n}\n\nexport const MainMenu: React.FC<IProps> = ({\n  items,\n  onSelect,\n  selectedKey,\n}) => {\n  const handleClick = React.useCallback((e) => onSelect(e.key), [onSelect]);\n\n  return Object.keys(items).length > 0 ? (\n    <Menu mode=\"horizontal\" onClick={handleClick} selectedKeys={[selectedKey]}>\n      <Menu.Item key={items.main.menuId} disabled={items.main.disabled}>\n        {items.main.title}\n      </Menu.Item>\n      <Menu.Item key={items.novosti.menuId} disabled={items.novosti.disabled}>\n        {items.novosti.title}\n      </Menu.Item>\n    </Menu>\n  ) : null;\n};\n","import { observable } from 'mobx';\nimport { IMenu, IMenuItem } from './types';\n\nexport class Menu {\n  @observable items: IMenu = {};\n\n  addMenuItem = (item: IMenuItem) => {\n    this.items[item.menuId] = item;\n  };\n\n  changeMenuItem = (menuId: string, item: Partial<IMenuItem>) => {\n    this.items[menuId] = { ...this.items[menuId], ...item };\n  };\n}\n\nexport default new Menu();","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\nimport Menu from '../entities/menu';\n\ninterface IProps {\n  component: React.ElementType;\n}\n\ntype IMatch = {\n  menuId?: string;\n};\n\nconst MenuContainer: React.FC<IProps> = ({ component: MenuComponent }) => {\n  const history = useHistory();\n  const match = useRouteMatch<IMatch>('/:menuId');\n\n  React.useEffect(() => {\n    Menu.addMenuItem({\n      menuId: 'main',\n      title: 'Главная',\n      disabled: false,\n      role: 'user',\n      routerId: null,\n    });\n\n    Menu.addMenuItem({\n      menuId: 'novosti',\n      title: 'Новости',\n      disabled: false,\n      role: 'user',\n      routerId: 'news',\n    });\n  }, []); // eslint-disable-line\n\n  const onSelect = React.useCallback(\n    (menuId) => {\n      history.push(`/${Menu.items[menuId].routerId}`);\n    },\n    [history]\n  );\n\n  const selectedMenuId = Object.values(Menu.items).find(\n    (item) => item.routerId === (match?.params?.menuId || null)\n  )?.menuId;\n\n  return (\n    <MenuComponent\n      items={Menu.items}\n      selectedKey={selectedMenuId}\n      onSelect={onSelect}\n    />\n  );\n};\n\nexport default observer(MenuContainer);\n","import { observable } from 'mobx';\nimport { ITraining } from './types';\n\nexport class TrainingStore {\n  @observable trainings: any = [\n    { type: 'Сноуборд', places: ['Новопеределкино', 'Крылатское'] },\n    { type: 'Скейтборд', places: ['ЦСКА', 'Верднадского'] },\n    { type: 'Батут', places: ['ЦСКА', 'AllPro'] },\n  ];\n}\n\nexport default new TrainingStore();\n","import React from 'react';\nimport {\n  Form,\n  Input,\n  Button,\n  DatePicker,\n  TimePicker,\n  Select,\n  Col,\n  Row,\n  message,\n  Skeleton,\n} from 'antd';\nimport 'moment/locale/ru';\nimport locale from 'antd/es/date-picker/locale/ru_RU';\nimport { useHistory } from 'react-router-dom';\n\nimport './styles.css';\n\nconst { Option } = Select;\n\nexport const Training = (props: any) => {\n  const history = useHistory();\n  const { times, places, speciality } = props;\n\n  const onFinish = async (values: any) => {\n    await message.success(\n      `Вы успешно записались на тренировку в ${values.type}`,\n      1.5\n    );\n    await message.info('Перенаправляем на главную...', 1);\n    history.push('/');\n  };\n  return places ? (\n    <div className=\"training_form\">\n      <Row justify=\"center\">\n        <Col sm={3}>\n          <Form layout=\"vertical\" name=\"basic\" onFinish={onFinish}>\n            <Form.Item\n              label=\"Место тренировки\"\n              name=\"type\"\n              rules={[{ required: true, message: 'Укажите место тренировки' }]}\n            >\n              <Select style={{ width: '100%' }}>\n                {places.places.map((place: any) => (\n                  <Option value={place}>{place}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item\n              label=\"Выберите дату\"\n              name=\"date\"\n              rules={[{ required: true, message: 'Укажите дату' }]}\n            >\n              <DatePicker locale={locale} style={{ width: '100%' }} />\n            </Form.Item>\n            <Form.Item\n              label=\"Доступное время\"\n              name=\"time\"\n              rules={[{ required: true, message: 'Укажите время' }]}\n            >\n              <Select style={{ width: '100%' }}>\n                //@ts-ignore\n                {times.map((time, i) => (\n                  <Option value={time[i]}>{time}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n\n            <Form.Item>\n              <Row justify=\"space-between\">\n                <Button type=\"primary\" htmlType=\"submit\">\n                  Записаться\n                </Button>\n                <Button type=\"primary\" onClick={history.goBack}>\n                  Назад\n                </Button>\n              </Row>\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n    </div>\n  ) : (\n    <Skeleton active></Skeleton>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { match as IMatch } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\nimport { observer } from 'mobx-react';\n\nimport { MainLayout } from '../components/Layouts/Main';\nimport MenuContainer from '../containers/MenuContainer';\nimport { MainMenu } from '../components/Molecules/MainMenu';\nimport TrainingStore from '../entities/training';\n\nimport { Training } from '../components/Molecules/Training';\n\nimport './styles.css';\nimport { toJS } from 'mobx';\n\ninterface TProps {\n  component: React.ElementType<any>;\n  match: IMatch<{ id: string }>;\n}\n\ntype TState = {\n  margin: number | null;\n  high: number | null;\n  low: number | null;\n};\n\nexport const BookingInfo: React.FC<TProps> = observer((props) => {\n  const [speciality, setSpeciality] = useState<string | undefined>('');\n  const [places, setPlaces] = useState<any>(null);\n  const history = useHistory();\n\n  useEffect(() => {\n    setSpeciality(history.location.pathname.split('/').pop());\n\n    setPlaces(\n      //@ts-ignore\n      Object.values(toJS(TrainingStore.trainings)).find(\n        (elem: any) => elem.type === speciality\n      )\n    );\n  }, [history, speciality]);\n\n  const times = ['15-00', '17-00', '20-30'];\n\n  const Card = () => (\n    <Training times={times} places={places} speciality={speciality} />\n  );\n\n  return (\n    <MainLayout\n      header={() => <MenuContainer component={MainMenu} />}\n      body={() => <Card />}\n    />\n  );\n});\n\nexport default BookingInfo;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport Booking from './Booking';\n\nconst School = React.lazy(() => import('./School'));\nconst About = React.lazy(() => import('./About'));\n\nconst Main = () => (\n  <React.Suspense fallback=\"...Loading\">\n    <School />\n  </React.Suspense>\n);\n\nexport const Routes = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route exact path={process.env.PUBLIC_URL + '/'} component={Main} />\n      <Route\n        path={process.env.PUBLIC_URL + '/booking/:id'}\n        component={Booking}\n      />\n      <Route path=\"/about\" component={About} />\n      <Redirect to=\"/\" />\n    </Switch>\n  </BrowserRouter>\n);\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport 'antd/dist/antd.css';\n\nimport { Routes } from './pages';\n\nconst App: React.FC = () => (\n  <Router>\n    <Routes />\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}